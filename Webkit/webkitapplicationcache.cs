//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Webbed.Scripting.Interop
{
    public unsafe partial class WebKitApplicationCache
    {
        // DEBUG: WEBKIT_API unsigned long longwebkit_application_cache_get_maximum_size(void)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_application_cache_get_maximum_size")]
        internal static extern ulong webkit_application_cache_get_maximum_size();

        public static ulong MaximumSize
        {
            get
            {
                return webkit_application_cache_get_maximum_size();
            }
            set
            {
                webkit_application_cache_set_maximum_size(value);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_application_cache_set_maximum_size(unsigned long long size)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_application_cache_set_maximum_size")]
        internal static extern void webkit_application_cache_set_maximum_size(ulong size);

        // DEBUG: WEBKIT_API const gchar*webkit_application_cache_get_database_directory_path(void)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_application_cache_get_database_directory_path")]
        internal static extern string webkit_application_cache_get_database_directory_path();

        public string DatabaseDirectoryPath
        {
            get
            {
                return webkit_application_cache_get_database_directory_path();
            }
        }
    }
}
