//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Webbed.Scripting.Interop
{
    // DEBUG: enum { WEBKIT_NAVIGATION_RESPONSE_ACCEPT, WEBKIT_NAVIGATION_RESPONSE_IGNORE, WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD}
    /// <summary>
    /// <para>WebKitNavigationResponse: _NAVIGATION_RESPONSE_ACCEPT: Instruct
    /// WebKit to allow the navigation. _NAVIGATION_RESPONSE_IGNORE: Instruct
    /// WebKit to ignore the navigation. _NAVIGATION_RESPONSE_DOWNLOAD: Instruct
    /// WebKit to start a download of the destination instead.</para>
    /// </summary>
    /// <remarks>
    /// <para>/**</para>
    /// <para> * WebKitNavigationResponse:</para>
    /// <para> * @WEBKIT_NAVIGATION_RESPONSE_ACCEPT: Instruct WebKit to allow
    /// the navigation.</para>
    /// <para> * @WEBKIT_NAVIGATION_RESPONSE_IGNORE: Instruct WebKit to ignore
    /// the navigation.</para>
    /// <para> * @WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD: Instruct WebKit to start
    /// a download of the destination instead.</para>
    /// <para> *</para>
    /// <para> * Enum values used to denote the various responses to a
    /// navigation policy decision.</para>
    /// <para> **/</para>
    /// </remarks>
    // DEBUG: enum { WEBKIT_NAVIGATION_RESPONSE_ACCEPT, WEBKIT_NAVIGATION_RESPONSE_IGNORE, WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD}
    public enum WebKitNavigationResponse
    {
        WEBKIT_NAVIGATION_RESPONSE_ACCEPT = 0,
        WEBKIT_NAVIGATION_RESPONSE_IGNORE = 1,
        WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD = 2
    }

    // DEBUG: enum{ WEBKIT_WEB_VIEW_TARGET_INFO_HTML, WEBKIT_WEB_VIEW_TARGET_INFO_TEXT, WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE, WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST, WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL}
    /// <summary>
    /// <para>WebKitWebViewTargetInfo: _WEB_VIEW_TARGET_INFO_HTML: Rich markup
    /// data _WEB_VIEW_TARGET_INFO_TEXT: Text data _WEB_VIEW_TARGET_INFO_IMAGE:
    /// Image data _WEB_VIEW_TARGET_INFO_URI_LIST: URI list data
    /// _WEB_VIEW_TARGET_INFO_NETSCAPE_URL: A single URL in the Netscape
    /// protocol</para>
    /// </summary>
    /// <remarks>
    /// <para>/**</para>
    /// <para> * WebKitWebViewTargetInfo:</para>
    /// <para> * @WEBKIT_WEB_VIEW_TARGET_INFO_HTML: Rich markup data</para>
    /// <para> * @WEBKIT_WEB_VIEW_TARGET_INFO_TEXT: Text data</para>
    /// <para> * @WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE: Image data</para>
    /// <para> * @WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST: URI list data</para>
    /// <para> * @WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL: A single URL in the
    /// Netscape protocol</para>
    /// <para> *</para>
    /// <para> * Enum values used to denote the info value of various selection
    /// types. These can be used</para>
    /// <para> * to interpret the data WebKitGTK+ publishes via GtkClipboard
    /// and drag-and-drop.</para>
    /// <para> **/</para>
    /// </remarks>
    // DEBUG: enum{ WEBKIT_WEB_VIEW_TARGET_INFO_HTML, WEBKIT_WEB_VIEW_TARGET_INFO_TEXT, WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE, WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST, WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL}
    public enum WebKitWebViewTargetInfo
    {
        WEBKIT_WEB_VIEW_TARGET_INFO_HTML = 0,
        WEBKIT_WEB_VIEW_TARGET_INFO_TEXT = 1,
        WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE = 2,
        WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST = 3,
        WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL = 4
    }

    // DEBUG: enum{ WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED, WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING, WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN, WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED, WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED}
    /// <summary>
    /// <para>WebKitWebViewViewMode: _WEB_VIEW_VIEW_MODE_WINDOWED: Windowed
    /// view mode _WEB_VIEW_VIEW_MODE_FLOATING: Floating view mode
    /// _WEB_VIEW_VIEW_MODE_FULLSCREEN: Fullscreen view mode
    /// _WEB_VIEW_VIEW_MODE_MAXIMIZED: Maximized view mode
    /// _WEB_VIEW_VIEW_MODE_MINIMIZED: Minimized view mode</para>
    /// </summary>
    /// <remarks>
    /// <para>/**</para>
    /// <para> * WebKitWebViewViewMode:</para>
    /// <para> * @WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED: Windowed view mode</para>
    /// <para> * @WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING: Floating view mode</para>
    /// <para> * @WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN: Fullscreen view
    /// mode</para>
    /// <para> * @WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED: Maximized view
    /// mode</para>
    /// <para> * @WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED: Minimized view
    /// mode</para>
    /// <para> *</para>
    /// <para> * Enum values used to denote the various types of view modes.
    /// See the</para>
    /// <para> * #WebKitWebView:view-mode property.</para>
    /// <para> **/</para>
    /// </remarks>
    // DEBUG: enum{ WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED, WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING, WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN, WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED, WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED}
    public enum WebKitWebViewViewMode
    {
        WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED = 0,
        WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING = 1,
        WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN = 2,
        WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED = 3,
        WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED = 4
    }

    // DEBUG: enum{ WEBKIT_SELECTION_AFFINITY_UPSTREAM, WEBKIT_SELECTION_AFFINITY_DOWNSTREAM,}
    public enum WebKitSelectionAffinity
    {
        WEBKIT_SELECTION_AFFINITY_UPSTREAM = 0,
        WEBKIT_SELECTION_AFFINITY_DOWNSTREAM = 1
    }

    // DEBUG: enum{ WEBKIT_INSERT_ACTION_TYPED, WEBKIT_INSERT_ACTION_PASTED, WEBKIT_INSERT_ACTION_DROPPED,}
    public enum WebKitInsertAction
    {
        WEBKIT_INSERT_ACTION_TYPED = 0,
        WEBKIT_INSERT_ACTION_PASTED = 1,
        WEBKIT_INSERT_ACTION_DROPPED = 2
    }

    // DEBUG: typedef struct _WebKitWebViewPrivate WebKitWebViewPrivate
    // DEBUG: typedef enum { WEBKIT_NAVIGATION_RESPONSE_ACCEPT, WEBKIT_NAVIGATION_RESPONSE_IGNORE, WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD} WebKitNavigationResponse
    // DEBUG: typedef enum{ WEBKIT_WEB_VIEW_TARGET_INFO_HTML, WEBKIT_WEB_VIEW_TARGET_INFO_TEXT, WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE, WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST, WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL} WebKitWebViewTargetInfo
    // DEBUG: typedef enum{ WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED, WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING, WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN, WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED, WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED} WebKitWebViewViewMode
    // DEBUG: typedef enum{ WEBKIT_SELECTION_AFFINITY_UPSTREAM, WEBKIT_SELECTION_AFFINITY_DOWNSTREAM,} WebKitSelectionAffinity
    // DEBUG: typedef enum{ WEBKIT_INSERT_ACTION_TYPED, WEBKIT_INSERT_ACTION_PASTED, WEBKIT_INSERT_ACTION_DROPPED,} WebKitInsertAction
    // DEBUG: struct _WebKitWebViewPrivate
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public unsafe struct _WebKitWebViewPrivate
    {
    }

    // DEBUG: struct _WebKitWebView { GtkContainer parent_instance; /*< private >*/ WebKitWebViewPrivate *priv;}
    [StructLayout(LayoutKind.Explicit, Size = 24)]
    public unsafe struct _WebKitWebView
    {
        // DEBUG: GtkContainer parent_instance
        [FieldOffset(0)]
        public _GtkContainer parent_instance;

        // DEBUG: WebKitWebViewPrivate *priv
        [FieldOffset(20)]
        public global::System.IntPtr priv;
    }

    // DEBUG: struct _WebKitWebViewClass { GtkContainerClass parent_class; /*< public >*/ /* * default handler/virtual methods */ WebKitWebView * (* create_web_view) (WebKitWebView *web_view, WebKitWebFrame *web_frame); gboolean (* web_view_ready) (WebKitWebView* web_view); gboolean (* close_web_view) (WebKitWebView* web_view); WebKitNavigationResponse (* navigation_requested) (WebKitWebView *web_view, WebKitWebFrame *frame, WebKitNetworkRequest *request); void (* window_object_cleared) (WebKitWebView *web_view, WebKitWebFrame *frame, JSGlobalContextRef context, JSObjectRef window_object); gchar * (* choose_file) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *old_file); gboolean (* script_alert) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *alert_message); gboolean (* script_confirm) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *confirm_message, gboolean *did_confirm); gboolean (* script_prompt) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *message, const gchar *default_value, gchar* *value); gboolean (* console_message) (WebKitWebView *web_view, const gchar *message, guint line_number, const gchar* source_id); void (* select_all) (WebKitWebView *web_view); void (* cut_clipboard) (WebKitWebView *web_view); void (* copy_clipboard) (WebKitWebView *web_view); void (* paste_clipboard) (WebKitWebView *web_view); gboolean (* move_cursor) (WebKitWebView *web_view, GtkMovementStep step, gint count); /* * internal */ void (* set_scroll_adjustments) (WebKitWebView *web_view, GtkAdjustment *hadjustment, GtkAdjustment *vadjustment); void (* undo) (WebKitWebView *web_view); void (* redo) (WebKitWebView *web_view); gboolean (* should_allow_editing_action) (WebKitWebView *web_view); /* Padding for future expansion */ void (*_webkit_reserved0) (void); void (*_webkit_reserved1) (void); void (*_webkit_reserved2) (void);}
    [StructLayout(LayoutKind.Explicit, Size = 576)]
    public unsafe struct _WebKitWebViewClass
    {
        // DEBUG: GtkContainerClass parent_class
        [FieldOffset(0)]
        public _GtkContainerClass parent_class;

        // DEBUG: WebKitWebView * (* create_web_view) (WebKitWebView *web_view, WebKitWebFrame *web_frame)
        [FieldOffset(488)]
        public global::System.IntPtr create_web_view;

        // DEBUG: gboolean (* web_view_ready) (WebKitWebView* web_view)
        [FieldOffset(492)]
        public global::System.IntPtr web_view_ready;

        // DEBUG: gboolean (* close_web_view) (WebKitWebView* web_view)
        [FieldOffset(496)]
        public global::System.IntPtr close_web_view;

        // DEBUG: WebKitNavigationResponse (* navigation_requested) (WebKitWebView *web_view, WebKitWebFrame *frame, WebKitNetworkRequest *request)
        [FieldOffset(500)]
        public global::System.IntPtr navigation_requested;

        // DEBUG: void (* window_object_cleared) (WebKitWebView *web_view, WebKitWebFrame *frame, JSGlobalContextRef context, JSObjectRef window_object)
        [FieldOffset(504)]
        public global::System.IntPtr window_object_cleared;

        // DEBUG: gchar * (* choose_file) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *old_file)
        [FieldOffset(508)]
        public global::System.IntPtr choose_file;

        // DEBUG: gboolean (* script_alert) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *alert_message)
        [FieldOffset(512)]
        public global::System.IntPtr script_alert;

        // DEBUG: gboolean (* script_confirm) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *confirm_message, gboolean *did_confirm)
        [FieldOffset(516)]
        public global::System.IntPtr script_confirm;

        // DEBUG: gboolean (* script_prompt) (WebKitWebView *web_view, WebKitWebFrame *frame, const gchar *message, const gchar *default_value, gchar* *value)
        [FieldOffset(520)]
        public global::System.IntPtr script_prompt;

        // DEBUG: gboolean (* console_message) (WebKitWebView *web_view, const gchar *message, guint line_number, const gchar* source_id)
        [FieldOffset(524)]
        public global::System.IntPtr console_message;

        // DEBUG: void (* select_all) (WebKitWebView *web_view)
        [FieldOffset(528)]
        public global::System.IntPtr select_all;

        // DEBUG: void (* cut_clipboard) (WebKitWebView *web_view)
        [FieldOffset(532)]
        public global::System.IntPtr cut_clipboard;

        // DEBUG: void (* copy_clipboard) (WebKitWebView *web_view)
        [FieldOffset(536)]
        public global::System.IntPtr copy_clipboard;

        // DEBUG: void (* paste_clipboard) (WebKitWebView *web_view)
        [FieldOffset(540)]
        public global::System.IntPtr paste_clipboard;

        // DEBUG: gboolean (* move_cursor) (WebKitWebView *web_view, GtkMovementStep step, gint count)
        [FieldOffset(544)]
        public global::System.IntPtr move_cursor;

        // DEBUG: void (* set_scroll_adjustments) (WebKitWebView *web_view, GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
        [FieldOffset(548)]
        public global::System.IntPtr set_scroll_adjustments;

        // DEBUG: void (* undo) (WebKitWebView *web_view)
        [FieldOffset(552)]
        public global::System.IntPtr undo;

        // DEBUG: void (* redo) (WebKitWebView *web_view)
        [FieldOffset(556)]
        public global::System.IntPtr redo;

        // DEBUG: gboolean (* should_allow_editing_action) (WebKitWebView *web_view)
        [FieldOffset(560)]
        public global::System.IntPtr should_allow_editing_action;
    }

    public unsafe partial class WebKitWebView : GLib.Object
    {
        public WebKitWebView(IntPtr handle) : base(handle) { }
        // DEBUG: WEBKIT_API GTypewebkit_web_view_get_type (void)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_type")]
        internal static extern uint webkit_web_view_get_type();

        public override GLib.GType Type
        {
            get
            {
                return new GLib.GType((IntPtr)webkit_web_view_get_type());
            }
        }

        // DEBUG: WEBKIT_API GtkWidget *webkit_web_view_new (void)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_new")]
        internal static extern global::System.IntPtr webkit_web_view_new();


        public WebKitWebView() : base(webkit_web_view_new()) { };
        // DEBUG: WEBKIT_API const gchar *webkit_web_view_get_title (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_get_title")]
        internal static extern string webkit_web_view_get_title(global::System.IntPtr web_view);

        public string Title{
            get{
                return webkit_web_view_get_title(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API const gchar *webkit_web_view_get_uri (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_get_uri")]
        internal static extern string webkit_web_view_get_uri(global::System.IntPtr web_view);

        public string Uri{
            get{
                return webkit_web_view_get_uri(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_maintains_back_forward_list (WebKitWebView *web_view, gboolean flag)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_maintains_back_forward_list")]
        internal static extern void webkit_web_view_set_maintains_back_forward_list(global::System.IntPtr web_view, bool flag);

        public void SetMaintainsBackForwardList(bool flag){
            webkit_web_view_set_maintains_back_forward_list(this.Handle,flag);
        }

        public WebKitWebBackForwardList GetMaintainsBackForwardList(){
            return new WebKitWebBackForwardList(webkit_web_view_get_back_forward_list(this.Handle));
        }

        // DEBUG: WEBKIT_API WebKitWebBackForwardList *webkit_web_view_get_back_forward_list (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_back_forward_list")]
        internal static extern global::System.IntPtr webkit_web_view_get_back_forward_list(global::System.IntPtr web_view);

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_go_to_back_forward_item (WebKitWebView *web_view, WebKitWebHistoryItem *item)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_go_to_back_forward_item")]
        internal static extern bool webkit_web_view_go_to_back_forward_item(global::System.IntPtr web_view, global::System.IntPtr item);

        public bool GoToBackForwardItem(WebKitWebHistoryItem item){
            return webkit_web_view_go_to_back_forward_item(this.Handle,item.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_go_back (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_go_back")]
        internal static extern bool webkit_web_view_can_go_back(global::System.IntPtr web_view);

        public bool CanGoBack{
            get{
                return webkit_web_view_can_go_back(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_go_back_or_forward (WebKitWebView *web_view, gint steps)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_go_back_or_forward")]
        internal static extern bool webkit_web_view_can_go_back_or_forward(global::System.IntPtr web_view, int steps);

        public bool CanGoBackOrForward(int steps){
            return webkit_web_view_can_go_back_or_forward(this.Handle,steps);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_go_forward (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_go_forward")]
        internal static extern bool webkit_web_view_can_go_forward(global::System.IntPtr web_view);

        public bool CanGoForward(){
            return webkit_web_view_can_go_forward(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_go_back (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_go_back")]
        internal static extern void webkit_web_view_go_back(global::System.IntPtr web_view);

        public void GoBack(){
            webkit_web_view_go_back(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_go_back_or_forward (WebKitWebView *web_view, gint steps)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_go_back_or_forward")]
        internal static extern void webkit_web_view_go_back_or_forward(global::System.IntPtr web_view, int steps);

        public void GoBackOrForward(int steps){
            webkit_web_view_go_back_or_forward(this.Handle,steps);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_go_forward (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_go_forward")]
        internal static extern void webkit_web_view_go_forward(global::System.IntPtr web_view);

        public void GoForward(){
            webkit_web_view_go_forward(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_stop_loading (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_stop_loading")]
        internal static extern void webkit_web_view_stop_loading(global::System.IntPtr web_view);

        public void StopLoading(){
            webkit_web_view_stop_loading(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_open (WebKitWebView *web_view, const gchar *uri)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_open")]
        internal static extern void webkit_web_view_open(global::System.IntPtr web_view, string uri);

        public void Open(string uri){
            webkit_web_view_open(this.Handle,uri);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_reload (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_reload")]
        internal static extern void webkit_web_view_reload(global::System.IntPtr web_view);

        public void Reload(){
            webkit_web_view_reload(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_reload_bypass_cache (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_reload_bypass_cache")]
        internal static extern void webkit_web_view_reload_bypass_cache(global::System.IntPtr web_view);

        public void ReloadBypassCache(){
            webkit_web_view_reload_bypass_cache(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_load_uri (WebKitWebView *web_view, const gchar *uri)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_load_uri")]
        internal static extern void webkit_web_view_load_uri(global::System.IntPtr web_view, string uri);

        public void LoadUri(string uri){
            webkit_web_view_load_uri(this.Handle,uri);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_load_string (WebKitWebView *web_view, const gchar *content, const gchar *mime_type, const gchar *encoding, const gchar *base_uri)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_load_string")]
        internal static extern void webkit_web_view_load_string(global::System.IntPtr web_view, string content, string mime_type, string encoding, string base_uri);

        public void LoadString(string content, string mime_type, string encoding, string base_uri){
            webkit_web_view_load_string(this.Handle,content,mime_type,encoding,base_uri);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_load_html_string (WebKitWebView *web_view, const gchar *content, const gchar *base_uri)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_load_html_string")]
        internal static extern void webkit_web_view_load_html_string(global::System.IntPtr web_view, string content, string base_uri);

        public void LoadHtmlString(string content, string base_uri){
            webkit_web_view_load_html_string(this.Handle,content,base_uri);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_load_request (WebKitWebView *web_view, WebKitNetworkRequest *request)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_load_request")]
        internal static extern void webkit_web_view_load_request(global::System.IntPtr web_view, global::System.IntPtr request);

        public void LoadRequest(WebKitNetworkRequest request){
            webkit_web_view_load_request(this.Handle,request.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_search_text (WebKitWebView *web_view, const gchar *text, gboolean case_sensitive, gboolean forward, gboolean wrap)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_search_text")]
        internal static extern bool webkit_web_view_search_text(global::System.IntPtr web_view, string text, bool case_sensitive, bool forward, bool wrap);

        public bool SearchText(string text,  bool case_sensitive, bool forward, bool wrap){
            return webkit_web_view_search_text(this.Handle,text,case_sensitive,forward,wrap);
        }

        // DEBUG: WEBKIT_API guintwebkit_web_view_mark_text_matches (WebKitWebView *web_view, const gchar *string, gboolean case_sensitive, guint limit)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_mark_text_matches")]
        internal static extern uint webkit_web_view_mark_text_matches(global::System.IntPtr web_view, string @string, bool case_sensitive, uint limit);

        public uint MarkTextMatches(string @string, bool case_sensitive, uint limit){
            return webkit_web_view_mark_text_matches(this.Handle, @string, case_sensitive,limit);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_highlight_text_matches (WebKitWebView *web_view, gboolean highlight)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_highlight_text_matches")]
        internal static extern void webkit_web_view_set_highlight_text_matches(global::System.IntPtr web_view, bool highlight);

        public void SetHiglightTextMatchs(bool highlight){
            webkit_web_view_set_highlight_text_matches(this.Handle, highlight);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_unmark_text_matches (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_unmark_text_matches")]
        internal static extern void webkit_web_view_unmark_text_matches(global::System.IntPtr web_view);

        public void UnMarkTextMatches(){
            webkit_web_view_unmark_text_matches(this.Handle);
        }

        // DEBUG: WEBKIT_API WebKitWebFrame *webkit_web_view_get_main_frame (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_main_frame")]
        internal static extern global::System.IntPtr webkit_web_view_get_main_frame(global::System.IntPtr web_view);

        public WebKitWebFrame MainFrame{
            get{
                return new WebKitWebFrame(webkit_web_view_get_main_frame(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API WebKitWebFrame *webkit_web_view_get_focused_frame (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_focused_frame")]
        internal static extern global::System.IntPtr webkit_web_view_get_focused_frame(global::System.IntPtr web_view);

        public WebKitWebFrame FocusedFrame{
            get{
                return new WebKitWebFrame(webkit_web_view_get_focused_frame(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_execute_script (WebKitWebView *web_view, const gchar *script)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_execute_script")]
        internal static extern void webkit_web_view_execute_script(global::System.IntPtr web_view, string script);

        public void ExecuteScript(string script){
            webkit_web_view_execute_script(this.Handle,script);
        }


        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_cut_clipboard (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_cut_clipboard")]
        internal static extern bool webkit_web_view_can_cut_clipboard(global::System.IntPtr web_view);

        public bool CanCutClipboard{
            get{ return webkit_web_view_can_cut_clipboard(this.Handle);}
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_copy_clipboard (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_copy_clipboard")]
        internal static extern bool webkit_web_view_can_copy_clipboard(global::System.IntPtr web_view);

        public bool CanCopyClipboard{
            get{ return webkit_web_view_can_copy_clipboard(this.Handle);}
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_paste_clipboard (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_paste_clipboard")]
        internal static extern bool webkit_web_view_can_paste_clipboard(global::System.IntPtr web_view);

        public bool CanPasteClipboard{
            get{ return webkit_web_view_can_paste_clipboard(this.Handle);}
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_cut_clipboard (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_cut_clipboard")]
        internal static extern void webkit_web_view_cut_clipboard(global::System.IntPtr web_view);

        public void CutClipboard(){
            webkit_web_view_cut_clipboard(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_copy_clipboard (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_copy_clipboard")]
        internal static extern void webkit_web_view_copy_clipboard(global::System.IntPtr web_view);

        public void CopyClipboard(){
            webkit_web_view_copy_clipboard(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_paste_clipboard (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_paste_clipboard")]
        internal static extern void webkit_web_view_paste_clipboard(global::System.IntPtr web_view);

        public void PasteClipboard(){
            webkit_web_view_paste_clipboard(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_delete_selection (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_delete_selection")]
        internal static extern void webkit_web_view_delete_selection(global::System.IntPtr web_view);

        public void DeleteSelection(){
            webkit_web_view_delete_selection(this.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_has_selection (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_has_selection")]
        internal static extern bool webkit_web_view_has_selection(global::System.IntPtr web_view);

        public bool HasSelection{
            get{
                return webkit_web_view_has_selection(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_select_all (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_select_all")]
        internal static extern void webkit_web_view_select_all(global::System.IntPtr web_view);

        public void SelectAll(){
            webkit_web_view_select_all(this.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_get_editable (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_editable")]
        internal static extern bool webkit_web_view_get_editable(global::System.IntPtr web_view);

        public bool Editable{
            get{
                return webkit_web_view_get_editable(this.Handle);
            }set{
                webkit_web_view_set_editable(this.Handle,value);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_editable (WebKitWebView *web_view, gboolean flag)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_editable")]
        internal static extern void webkit_web_view_set_editable(global::System.IntPtr web_view, bool flag);

        // DEBUG: WEBKIT_API GtkTargetList *webkit_web_view_get_copy_target_list (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_copy_target_list")]
        internal static extern global::System.IntPtr webkit_web_view_get_copy_target_list(global::System.IntPtr web_view);

        public Gtk.TargetList CopyTargetList{
            get{
                return new Gtk.TargetList(webkit_web_view_get_copy_target_list(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API GtkTargetList *webkit_web_view_get_paste_target_list (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_paste_target_list")]
        internal static extern global::System.IntPtr webkit_web_view_get_paste_target_list(global::System.IntPtr web_view);

        
        public Gtk.TargetList PasteTargetList{
            get{
                return new Gtk.TargetList(webkit_web_view_get_paste_target_list(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_settings (WebKitWebView *web_view, WebKitWebSettings *settings)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_settings")]
        internal static extern void webkit_web_view_set_settings(global::System.IntPtr web_view, global::System.IntPtr settings);

        // DEBUG: WEBKIT_API WebKitWebSettings *webkit_web_view_get_settings (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_settings")]
        internal static extern global::System.IntPtr webkit_web_view_get_settings(global::System.IntPtr web_view);

        public WebKitWebSettings Settings{
            get{
                return new WebKitWebSettings(webkit_web_view_get_settings(this.Handle));
            }set{
                webkit_web_view_set_settings(this.Handle,value.Handle);
            }
        }

        // DEBUG: WEBKIT_API WebKitWebInspector *webkit_web_view_get_inspector (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_inspector")]
        internal static extern global::System.IntPtr webkit_web_view_get_inspector(global::System.IntPtr web_view);

        public WebKitWebInspector Inspector{
            get{
                return new WebKitWebInspector(webkit_web_view_get_inspector(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API WebKitWebWindowFeatures*webkit_web_view_get_window_features (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_window_features")]
        internal static extern global::System.IntPtr webkit_web_view_get_window_features(global::System.IntPtr web_view);

        public WebKitWebWindowFeatures WindowFeatures{
            get{
                return new WebKitWebWindowFeatures(webkit_web_view_get_window_features(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_show_mime_type (WebKitWebView *web_view, const gchar *mime_type)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_can_show_mime_type")]
        internal static extern bool webkit_web_view_can_show_mime_type(global::System.IntPtr web_view, string mime_type);

        public bool CanShowMimeType(string mime_type){
            return webkit_web_view_can_show_mime_type(this.Handle, mime_type);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_get_transparent (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_transparent")]
        internal static extern bool webkit_web_view_get_transparent(global::System.IntPtr web_view);

        public bool Transparent{
            get{
                return webkit_web_view_get_transparent(this.Handle);
            }set{
                webkit_web_view_set_transparent(this.Handle,value);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_transparent (WebKitWebView *web_view, gboolean flag)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_transparent")]
        internal static extern void webkit_web_view_set_transparent(global::System.IntPtr web_view, bool flag);

        // DEBUG: WEBKIT_API gfloatwebkit_web_view_get_zoom_level (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_zoom_level")]
        internal static extern float webkit_web_view_get_zoom_level(global::System.IntPtr web_view);

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_zoom_level (WebKitWebView *web_view, gfloat zoom_level)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_zoom_level")]
        internal static extern void webkit_web_view_set_zoom_level(global::System.IntPtr web_view, float zoom_level);

        public float ZoomLevel{
            get{
                return webkit_web_view_get_zoom_level(this.Handle);
            }set{
                webkit_web_view_set_zoom_level(this.Handle,value);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_zoom_in (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_zoom_in")]
        internal static extern void webkit_web_view_zoom_in(global::System.IntPtr web_view);

        public void ZoomIn(){
            webkit_web_view_zoom_in(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_zoom_out (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_zoom_out")]
        internal static extern void webkit_web_view_zoom_out(global::System.IntPtr web_view);

        public void ZoomOut(){
            webkit_web_view_zoom_out(this.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_get_full_content_zoom (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_full_content_zoom")]
        internal static extern bool webkit_web_view_get_full_content_zoom(global::System.IntPtr web_view);

        public bool FullContentZoom{
            get{
                return webkit_web_view_get_full_content_zoom(this.Handle);
            }set{
                webkit_web_view_set_full_content_zoom(this.Handle,void);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_full_content_zoom (WebKitWebView *web_view, gboolean full_content_zoom)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_full_content_zoom")]
        internal static extern void webkit_web_view_set_full_content_zoom(global::System.IntPtr web_view, bool full_content_zoom);

        // DEBUG: WEBKIT_API const gchar*webkit_web_view_get_encoding (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_get_encoding")]
        internal static extern string webkit_web_view_get_encoding(global::System.IntPtr web_view);

        public string Encoding{
            get{
                return webkit_web_view_get_encoding(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_custom_encoding (WebKitWebView *web_view, const gchar *encoding)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet= CharSet.Ansi,
            EntryPoint="webkit_web_view_set_custom_encoding")]
        internal static extern void webkit_web_view_set_custom_encoding(global::System.IntPtr web_view, string encoding);

        public string CustomEncoding{
            get{
                return webkit_web_view_get_custom_encoding(this.Handle);
            }
            set{
                webkit_web_view_set_custom_encoding(this.Handle,value);
            }
        } 

        // DEBUG: WEBKIT_API const char*webkit_web_view_get_custom_encoding (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_get_custom_encoding")]
        internal static extern string webkit_web_view_get_custom_encoding(global::System.IntPtr web_view);

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_view_mode (WebKitWebView *web_view, WebKitWebViewViewMode mode)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_view_mode")]
        internal static extern void webkit_web_view_set_view_mode(global::System.IntPtr web_view, WebKitWebViewViewMode mode);

        // DEBUG: WEBKIT_API WebKitWebViewViewModewebkit_web_view_get_view_mode (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_view_mode")]
        internal static extern WebKitWebViewViewMode webkit_web_view_get_view_mode(global::System.IntPtr web_view);

        public WebKitWebViewViewMode ViewMode{
            get{
                return webkit_web_view_get_view_mode(this.Handle);
            }
            set{
                webkit_web_view_set_view_mode(this.Handle,value);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_move_cursor (WebKitWebView *web_view, GtkMovementStep step, gint count)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_move_cursor")]
        internal static extern void webkit_web_view_move_cursor(global::System.IntPtr web_view, Gtk.MovementStep step, int count);

        public void MoveCursor(Gtk.MovementStep step, int count){
            webkit_web_view_move_cursor(this.Handle,step,count);
        }

        // DEBUG: WEBKIT_API WebKitLoadStatuswebkit_web_view_get_load_status (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_load_status")]
        internal static extern WebKitLoadStatus webkit_web_view_get_load_status(global::System.IntPtr web_view);

        public WebKitLoadStatus LoadStatus{
            get{
                return webkit_web_view_get_load_status(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API gdoublewebkit_web_view_get_progress (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_progress")]
        internal static extern double webkit_web_view_get_progress(global::System.IntPtr web_view);

        public double Progress{
            get{
                return webkit_web_view_get_progress(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_undo (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_undo")]
        internal static extern void webkit_web_view_undo(global::System.IntPtr web_view);

        public void Undo(){
            webkit_web_view_undo(this.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_undo (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_undo")]
        internal static extern bool webkit_web_view_can_undo(global::System.IntPtr web_view);

        public bool CanUndo{
            get{
                return webkit_web_view_can_undo(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_redo (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_redo")]
        internal static extern void webkit_web_view_redo(global::System.IntPtr web_view);

        public void Redo(){
            webkit_web_view_redo(this.Handle);
        }

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_can_redo (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_can_redo")]
        internal static extern bool webkit_web_view_can_redo(global::System.IntPtr web_view);

        public bool CanRedo{
            get{
                return webkit_web_view_can_redo(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_view_set_view_source_mode (WebKitWebView *web_view, gboolean view_source_mode)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_set_view_source_mode")]
        internal static extern void webkit_web_view_set_view_source_mode(global::System.IntPtr web_view, bool view_source_mode);

        // DEBUG: WEBKIT_API gbooleanwebkit_web_view_get_view_source_mode (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_view_source_mode")]
        internal static extern bool webkit_web_view_get_view_source_mode(global::System.IntPtr web_view);

        public bool ViewSourceMode{
            get{
                return webkit_web_view_get_view_source_mode(this.Handle);
            }
            set{
                webkit_web_view_set_view_source_mode(this.Handle,value);
            }
        }

        // DEBUG: WEBKIT_API WebKitHitTestResult*webkit_web_view_get_hit_test_result (WebKitWebView *web_view, GdkEventButton *event)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_hit_test_result")]
        internal static extern global::System.IntPtr webkit_web_view_get_hit_test_result(global::System.IntPtr web_view, global::System.IntPtr @event);

        public WebKitHitTestResult HitTestResult{
            get{
                return new WebKitHitTestResult(webkit_web_view_get_hit_test_result(this.Handle,@event));
            }
        }

        // DEBUG: WEBKIT_API const gchar *webkit_web_view_get_icon_uri (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_view_get_icon_uri")]
        internal static extern string webkit_web_view_get_icon_uri(global::System.IntPtr web_view);

        public string IconUri{
            get{
                return webkit_web_view_get_icon_uri(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API GdkPixbuf *webkit_web_view_get_icon_pixbuf (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_icon_pixbuf")]
        internal static extern global::System.IntPtr webkit_web_view_get_icon_pixbuf(global::System.IntPtr web_view);

        public Gdk.Pixbuf IconPixbuf{
            get{
                return new Gdk.Pixbuf(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API GdkPixbuf *webkit_web_view_try_get_favicon_pixbuf (WebKitWebView *web_view, guint width, guint height)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_try_get_favicon_pixbuf")]
        internal static extern global::System.IntPtr webkit_web_view_try_get_favicon_pixbuf(global::System.IntPtr web_view, uint width, uint height);

        public Gdk.Pixbuf TryGetFaviconPixbuf(uint width, uint height){
            return new Gdk.Pixbuf(webkit_web_view_try_get_favicon_pixbuf(this.Handle, width,height);
        }

        // DEBUG: WEBKIT_API WebKitDOMDocument *webkit_web_view_get_dom_document (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_dom_document")]
        internal static extern global::System.IntPtr webkit_web_view_get_dom_document(global::System.IntPtr web_view);

        public WebKitDOMDocument DomDocument{
            get{
                return new WebKitDOMDocument(webkit_web_view_get_dom_document(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API WebKitViewportAttributes*webkit_web_view_get_viewport_attributes (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_view_get_viewport_attributes")]
        internal static extern global::System.IntPtr webkit_web_view_get_viewport_attributes(global::System.IntPtr web_view);

        public WebKitViewportAttributes ViewportAttributes{
            get{
                return new WebKitViewportAttributes(webkit_web_view_get_viewport_attributes(this.Handle));
            }
        }
    }
}
