//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Webbed.Scripting.Interop
{
    // DEBUG: enum { WEBKIT_LOAD_PROVISIONAL, WEBKIT_LOAD_COMMITTED, WEBKIT_LOAD_FINISHED, WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT, WEBKIT_LOAD_FAILED}
    /// <summary>
    /// <para>WebKitLoadStatus _LOAD_PROVISIONAL: No data has been received
    /// yet, empty structures have been allocated to perform the load; the load may
    /// still fail for transport issues such as not being able to resolve a name,
    /// or connect to a port. _LOAD_COMMITTED: The first data chunk has arrived,
    /// meaning that the necessary transport requirements are stabilished, and the
    /// load is being performed. _LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT: The first
    /// layout with actual visible content happened; one or more layouts may have
    /// happened before that caused nothing to be visible on the screen, because
    /// the data available at the time was not significant enough. _LOAD_FINISHED:
    /// This state means that everything that was required to display the page has
    /// been loaded. _LOAD_FAILED: This state means that some error occurred during
    /// the page load that prevented it from being completed. You can connect to
    /// the #WebKitWebView::load-error signal if you want to know precisely what
    /// kind of error occurred.</para>
    /// </summary>
    /// <remarks>
    /// <para>/**</para>
    /// <para> * WebKitLoadStatus</para>
    /// <para> * @WEBKIT_LOAD_PROVISIONAL: No data has been received yet,
    /// empty</para>
    /// <para> * structures have been allocated to perform the load; the load
    /// may</para>
    /// <para> * still fail for transport issues such as not being able to
    /// resolve a</para>
    /// <para> * name, or connect to a port.</para>
    /// <para> * @WEBKIT_LOAD_COMMITTED: The first data chunk has arrived,
    /// meaning</para>
    /// <para> * that the necessary transport requirements are stabilished, and
    /// the</para>
    /// <para> * load is being performed.</para>
    /// <para> * @WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT: The first layout
    /// with</para>
    /// <para> * actual visible content happened; one or more layouts may
    /// have</para>
    /// <para> * happened before that caused nothing to be visible on the
    /// screen,</para>
    /// <para> * because the data available at the time was not significant
    /// enough.</para>
    /// <para> * @WEBKIT_LOAD_FINISHED: This state means that everything that
    /// was</para>
    /// <para> * required to display the page has been loaded.</para>
    /// <para> * @WEBKIT_LOAD_FAILED: This state means that some error
    /// occurred</para>
    /// <para> * during the page load that prevented it from being completed.
    /// You</para>
    /// <para> * can connect to the #WebKitWebView::load-error signal if you
    /// want to</para>
    /// <para> * know precisely what kind of error occurred.</para>
    /// <para> */</para>
    /// </remarks>
    // DEBUG: enum { WEBKIT_LOAD_PROVISIONAL, WEBKIT_LOAD_COMMITTED, WEBKIT_LOAD_FINISHED, WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT, WEBKIT_LOAD_FAILED}
    public enum WebKitLoadStatus
    {
        WEBKIT_LOAD_PROVISIONAL = 0,
        WEBKIT_LOAD_COMMITTED = 1,
        WEBKIT_LOAD_FINISHED = 2,
        WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT = 3,
        WEBKIT_LOAD_FAILED = 4
    }

    // DEBUG: typedef struct _WebKitWebFramePrivate WebKitWebFramePrivate
    // DEBUG: typedef enum { WEBKIT_LOAD_PROVISIONAL, WEBKIT_LOAD_COMMITTED, WEBKIT_LOAD_FINISHED, WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT, WEBKIT_LOAD_FAILED} WebKitLoadStatus
    // DEBUG: struct _WebKitWebFramePrivate
    [StructLayout(LayoutKind.Explicit, Size = 0)]
    public unsafe struct _WebKitWebFramePrivate
    {
    }

    // DEBUG: struct _WebKitWebFrame { GObject parent_instance; /*< private >*/ WebKitWebFramePrivate *priv;}
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public unsafe struct _WebKitWebFrame
    {
        // DEBUG: GObject parent_instance
        [FieldOffset(0)]
        public _GObject parent_instance;

        // DEBUG: WebKitWebFramePrivate *priv
        [FieldOffset(12)]
        public global::System.IntPtr priv;
    }

    // DEBUG: struct _WebKitWebFrameClass { GObjectClass parent_class; /*< public >*/ void (*_webkit_reserved1) (void); void (*_webkit_reserved2) (void); void (*_webkit_reserved3) (void); void (*_webkit_reserved4) (void); void (*_webkit_reserved5) (void); void (*_webkit_reserved6) (void);}
    [StructLayout(LayoutKind.Explicit, Size = 92)]
    public unsafe struct _WebKitWebFrameClass
    {
        // DEBUG: GObjectClass parent_class
        [FieldOffset(0)]
        public _GObjectClass parent_class;
    }

    public unsafe partial class WebKitWebFrame: GLib.Object
    {
        public WebKitWebFrame(IntPtr handle) : base(handle) { }
        // DEBUG: WEBKIT_API GTypewebkit_web_frame_get_type (void)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_type")]
        internal static extern uint webkit_web_frame_get_type();

        public GLib.GType Type
        {
            get
            {
                return new GLib.GType((IntPtr)webkit_web_frame_get_type());
            }
        }
        // DEBUG: WEBKIT_API WebKitWebFrame *webkit_web_frame_new (WebKitWebView *web_view)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_new")]
        internal static extern global::System.IntPtr webkit_web_frame_new(global::System.IntPtr web_view);

        public WebKitWebFrame(WebKitWebView web_view) : base(webkit_web_frame_new(web_view.Handle)) { }

        // DEBUG: WEBKIT_API WebKitWebView *webkit_web_frame_get_web_view (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_web_view")]
        internal static extern global::System.IntPtr webkit_web_frame_get_web_view(global::System.IntPtr frame);

        public WebKitWebView WebView
        {
            get
            {
                return new WebKitWebView(webkit_web_frame_get_web_view(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API const gchar *webkit_web_frame_get_name (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_name")]
        internal static extern string webkit_web_frame_get_name(global::System.IntPtr frame);

        public string Name
        {
            get
            {
                return webkit_web_frame_get_name(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API const gchar *webkit_web_frame_get_title (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet=CharSet.Ansi,
            EntryPoint="webkit_web_frame_get_title")]
        internal static extern string webkit_web_frame_get_title(global::System.IntPtr frame);

        public string Title
        {
            get
            {
                return webkit_web_frame_get_title(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API const gchar *webkit_web_frame_get_uri (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet = CharSet.Ansi,
            EntryPoint="webkit_web_frame_get_uri")]
        internal static extern string webkit_web_frame_get_uri(global::System.IntPtr frame);

        public string Uri
        {
            get
            {
                return webkit_web_frame_get_uri(this.Handle);
            }
        }

        // DEBUG: WEBKIT_API WebKitWebFrame*webkit_web_frame_get_parent (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_parent")]
        internal static extern global::System.IntPtr webkit_web_frame_get_parent(global::System.IntPtr frame);

        public WebKitWebFrame Parent
        {
            get
            {
                return new WebKitWebFrame(webkit_web_frame_get_parent(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_load_uri (WebKitWebFrame *frame, const gchar *uri)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet = CharSet.Ansi,
            EntryPoint="webkit_web_frame_load_uri")]
        internal static extern void webkit_web_frame_load_uri(global::System.IntPtr frame, string uri);

        public void LoadUri(string uri)
        {
            webkit_web_frame_load_uri(this.Handle, uri);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_load_string (WebKitWebFrame *frame, const gchar *content, const gchar *mime_type, const gchar *encoding, const gchar *base_uri)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet = CharSet.Ansi,
            EntryPoint="webkit_web_frame_load_string")]
        internal static extern void webkit_web_frame_load_string(global::System.IntPtr frame, string content, string mime_type, string encoding, string base_uri);

        public void LoadString(string content, string mime_type, string encoding, string base_uri)
        {
            webkit_web_frame_load_string(this.Handle, content, mime_type, encoding, base_uri);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_load_alternate_string (WebKitWebFrame *frame, const gchar *content, const gchar *base_url, const gchar *unreachable_url)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet = CharSet.Ansi,
            EntryPoint="webkit_web_frame_load_alternate_string")]
        internal static extern void webkit_web_frame_load_alternate_string(global::System.IntPtr frame, string content, string base_url, string unreachable_url);

        public void LoadAlternateString(string content, string base_url, string unreachable_url)
        {
            webkit_web_frame_load_alternate_string(this.Handle, content, base_url, unreachable_url);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_load_request (WebKitWebFrame *frame, WebKitNetworkRequest *request)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_load_request")]
        internal static extern void webkit_web_frame_load_request(global::System.IntPtr frame, global::System.IntPtr request);

        public void LoadRequest(WebKitNetworkRequest request)
        {
            webkit_web_frame_load_request(this.Handle, request.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_stop_loading (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_stop_loading")]
        internal static extern void webkit_web_frame_stop_loading(global::System.IntPtr frame);

        public void StopLoading
        {
            webkit_web_frame_stop_loading(this.Handle);
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_reload (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_reload")]
        internal static extern void webkit_web_frame_reload(global::System.IntPtr frame);

        public void Reload(){
            webkit_web_frame_reload(this.Handle);
        }

        // DEBUG: WEBKIT_API WebKitWebFrame *webkit_web_frame_find_frame (WebKitWebFrame *frame, const gchar *name)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,CharSet = CharSet.Ansi,
            EntryPoint="webkit_web_frame_find_frame")]
        internal static extern global::System.IntPtr webkit_web_frame_find_frame(global::System.IntPtr frame, string name);

        public WebKitWebFrame FindFrame(string name){
            webkit_web_frame_find_frame(this.Handle,name);
        }

        // DEBUG: WEBKIT_API JSGlobalContextRefwebkit_web_frame_get_global_context (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_global_context")]
        internal static extern global::System.IntPtr webkit_web_frame_get_global_context(global::System.IntPtr frame);

        public JSGlobalContext GlobalContent{
            get{
                return webkit_web_frame_get_global_context(this.Handle);
            }
        }
        
        // DEBUG: WEBKIT_API GtkPrintOperationResultwebkit_web_frame_print_full (WebKitWebFrame *frame, GtkPrintOperation *operation, GtkPrintOperationAction action, GError **error)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_print_full")]
        internal static extern GtkPrintOperationResult webkit_web_frame_print_full(global::System.IntPtr frame, global::System.IntPtr operation, GtkPrintOperationAction action, ref global::System.IntPtr error);

        public GtkPrintOperationResult PrintFull(GtkPrintOperation operation, GtkPrintOperationAction action){
            IntPtr error;
            webkit_web_frame_print_full(this.Handle,operation.Handle,action,ref error);            
            if(error != IntPtr.Zero)
                throw new GLib.GException(error);

            return new GtkPrintOperationResult(handle);
        }


        // DEBUG: WEBKIT_API voidwebkit_web_frame_print (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_print")]
        internal static extern void webkit_web_frame_print(global::System.IntPtr frame);

        public void Print(){
            webkit_web_frame_print(this.Handle);
        }

        // DEBUG: WEBKIT_API WebKitLoadStatuswebkit_web_frame_get_load_status (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_load_status")]
        internal static extern WebKitLoadStatus webkit_web_frame_get_load_status(global::System.IntPtr frame);

        public WebKitLoadStatus LoadStatus(){
            webkit_web_frame_get_load_status(this.Handle);
        }

        // DEBUG: WEBKIT_API GtkPolicyTypewebkit_web_frame_get_horizontal_scrollbar_policy (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_horizontal_scrollbar_policy")]
        internal static extern GtkPolicyType webkit_web_frame_get_horizontal_scrollbar_policy(global::System.IntPtr frame);

        public GtkPolicyType HorizontalScrollbarPolicy
        {
            return new GtkPolicyType(webkit_web_frame_get_horizontal_scrollbar_policy(this.Handle));
        }

        // DEBUG: WEBKIT_API GtkPolicyTypewebkit_web_frame_get_vertical_scrollbar_policy (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_vertical_scrollbar_policy")]
        internal static extern GtkPolicyType webkit_web_frame_get_vertical_scrollbar_policy(global::System.IntPtr frame);

        public GtkPolicyType VerticalScrollbarPolicy
        {
            return new GtkPolicyType(webkit_web_frame_get_vertical_scrollbar_policy(this.Handle));
        }

        // DEBUG: WEBKIT_API WebKitWebDataSource *webkit_web_frame_get_data_source (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_data_source")]
        internal static extern global::System.IntPtr webkit_web_frame_get_data_source(global::System.IntPtr frame);

        public WebKitWebDataSource DataSource{
            get{
                return new WebKitWebDataSource(webkit_web_frame_get_data_source(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API WebKitWebDataSource *webkit_web_frame_get_provisional_data_source (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_provisional_data_source")]
        internal static extern global::System.IntPtr webkit_web_frame_get_provisional_data_source(global::System.IntPtr frame);

        public WebKitWebDataSource ProvisionalDataSource{
            get{
                return new WebKitWebDataSource(webkit_web_frame_get_provisional_data_source(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API WebKitSecurityOrigin*webkit_web_frame_get_security_origin (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_security_origin")]
        internal static extern global::System.IntPtr webkit_web_frame_get_security_origin(global::System.IntPtr frame);

        public WebKitSecurityOrigin SecurityOrigin{
            get{
                return new WebKitSecurityOrigin(webkit_web_frame_get_security_origin(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API WebKitNetworkResponse*webkit_web_frame_get_network_response (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_network_response")]
        internal static extern global::System.IntPtr webkit_web_frame_get_network_response(global::System.IntPtr frame);

        public WebKitNetworkResponse NetworkResponse{
            get{
                return new WebKitNetworkResponse(webkit_web_frame_get_network_response(this.Handle));
            }
        }

        // DEBUG: WEBKIT_API voidwebkit_web_frame_replace_selection (WebKitWebFrame *frame, const char *text)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, CharSet=CharSet.Ansi
            EntryPoint="webkit_web_frame_replace_selection")]
        internal static extern void webkit_web_frame_replace_selection(global::System.IntPtr frame, string text);

        public void ReplaceSelection(string text){
            webkit_web_frame_replace_selection(this.Handle,text);
        }

        // DEBUG: WEBKIT_API WebKitDOMRange*webkit_web_frame_get_range_for_word_around_caret (WebKitWebFrame *frame)
        [SuppressUnmanagedCodeSecurity]
        [DllImport("webkitgtk-1.0", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="webkit_web_frame_get_range_for_word_around_caret")]
        internal static extern global::System.IntPtr webkit_web_frame_get_range_for_word_around_caret(global::System.IntPtr frame);

        public WebKitDOMRange RangeForWordAroundCaret{
            get{
                return new WebKitDOMRange(webkit_web_frame_get_range_for_word_around_caret(this.Handle));
            }
        }
    }
}
